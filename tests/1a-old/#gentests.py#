import os
import subprocess

import toolspath
from testing.test import *

from check import check_sorted

# tests that use the generate utility and then check the output

class GenTest(Test):
   seed = 0
   n = 0
   cmd = []
   infile = "no/such/file"
   reffile = "no/such/file"
   def run(self):
      self.log("Running fastsort")
      child = subprocess.Popen(cmd, stdout=subprocess.PIPE)
      out, err = p.communicate()

      self.log("Checking output")
      (is_sorted, msg) = check_sorted(outfile, infile
      os.remove(outfile)
      if not is_sorted:
         raise Failure(msg)
      self.done()

class Empty(GenTest):
   name = "empty"
   description = "Empty input file. Output file should be empty"
   timeout = 15
   point_value = 7
   seed = 10
   n = 0
   infile = 
   reffile = 

class One(GenTest):
   name = "one"
   description = "Input file with a single record"
   timeout = 15
   point_value = 7
   seed = 10
   n = 1
   infile = 
   reffile = 

class Five1(GenTest):
   name = "five1"
   description = "Input file with five records"
   timeout = 15
   point_value = 7
   seed = 11
   n = 5
   infile = 
   reffile = 

class Five2(GenTest):
   name = "five2"
   description = "Input file with five records"
   timeout = 15
   point_value = 7
   seed = 12
   n = 5
   infile = 
   reffile = 

class Medium(GenTest):
   name = "medium"
   description = "Input file with 100 records"
   timeout = 20
   point_value = 7
   seed = 13
   n = 100
   infile = 
   reffile = 

class Large(GenTest):
   name = "large"
   description = "Input file with 10k records"
   timeout = 30
   point_value = 7
   seed = 14
   n = 10000
   infile = 
   reffile = 

class VeryLarge(GenTest):
   name = "verylarge"
   description = "Input file with 100k records"
   timeout = 60
   point_value = 7
   seed = 15
   n = 100000
   infile = 
   reffile = 

test_list = [Empty, One, Five1, Five2, Medium, Large, VeryLarge]
